const path = require('path')

const generateCodeFromSchema = ([apiName, _schema]) => {
  return `export function validate${apiName}(
  payload: unknown
): apiTypes.${apiName} {
  const validationResponse = is${apiName}(payload)

  if (!validationResponse.valid) {
    // TODO: properly log error
    console.log(validationResponse.errors)
    
    throw new Error( 'invalid payload: ${apiName}' )
  }
  
  return payload
}

export function is${apiName}(
  payload: unknown
): payload is apiTypes.${apiName} {
  /** Schema is defined in {@link SCHEMA.definitions.${apiName} } **/
  
  const validator = new Validator(SCHEMA.definitions.${apiName})
  return validator.validate(payload)
}`
}

const generator = ({ apiFilePath, apiFileCode, schema }) => {
  const apiFileName = path.basename(apiFilePath, '.ts')
  const isExportedTypeInApiTypes = apiName => {
    return (
      apiFileCode.includes(`export type ${apiName} =`) ||
      apiFileCode.includes(`export interface ${apiName} {`)
    )
  }

  const banner = `// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts

import { Validator } from '@cfworker/json-schema'
import * as apiTypes from './${apiFileName}'`

  const schemaDefinition = `const SCHEMA = ${JSON.stringify(schema, null, 2)}`

  const code = Object.entries(schema.definitions || {})
    .filter(([apiName]) => isExportedTypeInApiTypes(apiName))
    .map(generateCodeFromSchema)
    .join('\n\n')

  return `${banner}

${schemaDefinition}
  
${code}
`
}

exports.generator = generator
